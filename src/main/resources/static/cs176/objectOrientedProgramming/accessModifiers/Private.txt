import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

class Private {
	/*
	Any methods or instance variables declared as "private" in a class will not be
	accessible to any other classes. Here is what the current file looks like:
	
	// Private.java
	class A {
		private int a;
		private void display() {
			System.out.println("Hello from class A.");
		}
	}
	
	class B {
		public static void main(String[] args) {
			Private obj = new Private();
			obj.display(); // ERROR
			obj.a = 1; // ERROR
		}
	}
	
	As you can see, we cannot call the method "display" or change the "a" variable 
	from the "A" object because they are declared as "private". We can only do so 
	from within the "A" class. 
	For your challenge, we have created a class called "CashRegister".
	It is your task to create two private instance variables. 
	All CashRegister objects must have at least an item to purchase and the item 
	quantity.
	NOTE: The Item class has been created for you. Simply declare it as an
	instance variable.
	*/
	
	public static void main(String[] args) {
		Private privateAccessModifier = new Private();
	
		Item item = new Item();
		CashRegister testCashRegister = new CashRegister(item, 1); // TESTING YOUR CODE

		int score = 0;
		String tests = "";
		if(privateAccessModifier.modifiersAreCorrect("private"))
			score++;
		else
			tests += "Test 1 Failed: One or more instance variables were expected to be \"private\" but were not.";
		String result = score == 1 ? "\nCongratulations!!! You passed the challenge!!! " + score + "/1 Test Cases Passed" : "You have some bugs to fix! " + score + "/1 Test Cases Passed";
		System.out.println(result);
		System.out.println(tests);
	}
	
	//INJECT HERE
	/*
	static class CashRegister {
		// ENTER CODE BELOW
		private Item item;
		private int quantity;
		
		// DON'T CHANGE THIS CODE
		public CashRegister(Item item, int quantity) {
			this.item = item;
			this.quantity = quantity;
		}
	}
	*/
	
	static class Item {

	}
	
	// Tests if the instance variables of a class are private, public, protected, etc.
	public boolean modifiersAreCorrect(String expectedModifier) {
		Field[] reflectedClass = CashRegister.class.getDeclaredFields();
		boolean isCorrectModifier = false;
		
	    for (Field field : reflectedClass) {
	        int mod = field.getModifiers();
	        if(Modifier.toString(mod).equals(expectedModifier))
	        	isCorrectModifier = true;
	        else {
	        	isCorrectModifier = false;
	        	break;
	        }
	    }
	    
	    return isCorrectModifier;
	}

}

